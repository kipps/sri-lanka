<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'dd7bbb27a71cc4abd7905c3c597678b7' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"TinymceWrapperGRF","description":"TinymceWrapper Plugin uses GetResourceField to grab the url of your elFinder resource. Since I don\'t know if you have friendly url on or not, I had no choice. Please replace this in your Plugin property, enter the url of your elFinder resource.","editor_type":0,"category":0,"cache_type":0,"snippet":"$resource = $modx->getObject(\'modResource\', array($kF =>$kFv));\\nif($resource){\\n\\t$output = $resource->get($gNuFv);\\nreturn $output;\\n\\t}","locked":0,"properties":"a:3:{s:5:\\"gNuFv\\";a:7:{s:4:\\"name\\";s:5:\\"gNuFv\\";s:4:\\"desc\\";s:23:\\"getNewUnknownFieldValue\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:2:\\"kF\\";a:7:{s:4:\\"name\\";s:2:\\"kF\\";s:4:\\"desc\\";s:10:\\"knownField\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:3:\\"kFv\\";a:7:{s:4:\\"name\\";s:3:\\"kFv\\";s:4:\\"desc\\";s:15:\\"knownFieldValue\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"$resource = $modx->getObject(\'modResource\', array($kF =>$kFv));\\nif($resource){\\n\\t$output = $resource->get($gNuFv);\\nreturn $output;\\n\\t}"}',
        'guid' => 'e957d0694671d66903ffc7202299b6d0',
        'native_key' => 1,
        'signature' => '825e23a94044f9bed4280f8a7d822b6a',
      ),
      'b755bedf6ed4143e13eb5c1ea24705e8' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"TinymceWrapperGetUrlParam","description":"This extends your elFinder, gives you url parameter emperor status","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n *\\n * forked from getUrlParam by Paul Merchant\\n *\\n * A simple snippet to return a value passed through a URL parameter.\\n *\\n * OPTIONS\\n * name - The parameter name, defaults to p\\n * int - (Opt) Set as true to only allow integer values\\n * max - (Opt) The maximum length of the returned value, defaults to 20\\n * default - (Opt) The value returned if no URL parameter is found\\n *\\n * Example: [[TinymceWrapperGetUrlParam? &name=`pageid` &int=`1`]]\\n *\\n**\\/\\n\\n\\/\\/ set defaults\\n$name = $modx->getOption(\'name\',$scriptProperties,\'p\');\\n$int = $modx->getOption(\'int\',$scriptProperties,false);\\n$max = $modx->getOption(\'max\',$scriptProperties,20);\\n$output = $modx->getOption(\'default\',$scriptProperties,\'\');\\n\\n\\/\\/ get the sanitized value if there is one\\nif (isset($_GET[$name])) {\\n    if ($int) {\\n        $value = intval($_GET[$name]);\\n    } else {\\n        if (strlen($_GET[$name]) > $max) {\\n            $value = filter_var(substr($_GET[$name],0,$max), FILTER_SANITIZE_STRING);\\n        } else {\\n            $value = filter_var($_GET[$name], FILTER_SANITIZE_STRING);\\n        }\\n    }\\n\\n    $output = rawurldecode($value);\\n\\t\\tif($name == \'onlyMimes\'){\\n\\t\\t$output = \'[\\"\'.$output.\'\\"]\';\\n\\t}\\n\\t\\tif($name == \'user\'){\\n\\t\\t$output = \'?name=\'.$output;\\n\\t}\\n}\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n *\\n * forked from getUrlParam by Paul Merchant\\n *\\n * A simple snippet to return a value passed through a URL parameter.\\n *\\n * OPTIONS\\n * name - The parameter name, defaults to p\\n * int - (Opt) Set as true to only allow integer values\\n * max - (Opt) The maximum length of the returned value, defaults to 20\\n * default - (Opt) The value returned if no URL parameter is found\\n *\\n * Example: [[TinymceWrapperGetUrlParam? &name=`pageid` &int=`1`]]\\n *\\n**\\/\\n\\n\\/\\/ set defaults\\n$name = $modx->getOption(\'name\',$scriptProperties,\'p\');\\n$int = $modx->getOption(\'int\',$scriptProperties,false);\\n$max = $modx->getOption(\'max\',$scriptProperties,20);\\n$output = $modx->getOption(\'default\',$scriptProperties,\'\');\\n\\n\\/\\/ get the sanitized value if there is one\\nif (isset($_GET[$name])) {\\n    if ($int) {\\n        $value = intval($_GET[$name]);\\n    } else {\\n        if (strlen($_GET[$name]) > $max) {\\n            $value = filter_var(substr($_GET[$name],0,$max), FILTER_SANITIZE_STRING);\\n        } else {\\n            $value = filter_var($_GET[$name], FILTER_SANITIZE_STRING);\\n        }\\n    }\\n\\n    $output = rawurldecode($value);\\n\\t\\tif($name == \'onlyMimes\'){\\n\\t\\t$output = \'[\\"\'.$output.\'\\"]\';\\n\\t}\\n\\t\\tif($name == \'user\'){\\n\\t\\t$output = \'?name=\'.$output;\\n\\t}\\n}\\n\\nreturn $output;"}',
        'guid' => '9cbe2f1c59ff769901ab8b0aeb7b22f7',
        'native_key' => 2,
        'signature' => 'eb0006ee0d3a7320c7d1e9367880333f',
      ),
    ),
    'Plugins' => 
    array (
      '7a9d2daa9ad1ada027ed4915ca5015f3' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":1,"name":"TinymceWrapper","description":"Survive upgrades! Duplicate the Chunks, retain their original names with an added SUFFIX. Create dedicated PropertySet properties. Default properties will be overridden.\\nInclude no script tags in any of the chunks.\\nPlease be awesome!","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/*TinymceWrapper transforms textareas (introtext, description, content, RichTVs, File\\/Image TVs, Quick Update\\/Create, MIGX TVs.\\n\\nplugin fires at\\nOnRichTextEditorRegister\\nOnDocFormPrerender \\n\\nFOR ALL ROUND ENJOYMENT THROUGH OUT THE MANANGER\\n(quick update\\/create resources, link for many custom file browsers in top nav, MIGX CMPS)\\nOnManagerPageInit\\n\\nDON\'T WORRY, YOUR SITE WILL NOT BE SLOW ON ACCOUNT OF THIS PLUGIN\\n\\n-------------------Roadmap:\\n-Create more beautiful themes;\\n-Look for more ways to be awesome;\\n---------------------------\\n\\nUse freely, recode freely, report freely, enjoy freely\\nDedicated to those who have cried\\n---------------------------\\n\\nhttp:\\/\\/www.leofec.com\\/modx-revolution\\/\\n-donshakespeare in the MODx forum\\n*\\/\\n$modx->getService(\'error\',\'error.modError\', \'\', \'\');\\n$modxEventName = $modx->event->name;\\n\\/\\/let us tell System Settings that we have a new RTEditor\\nif ($modxEventName == \'OnRichTextEditorRegister\') {\\n  $modx->event->output(\'TinymceWrapper\');\\n  return;\\n}\\n\\n\\/\\/let us get MODx browser callback ready to fire\\nif ($modxEventName == \'OnRichTextBrowserInit\' && $autoFileBrowser == \'modxNativeBrowser\') {\\n $modx->controller->addJavascript(MODX_ASSETS_URL.\'components\\/tinymcewrapper\\/browserConnectors\\/browser.js\');\\n  $modx->event->output(\'twBrowserCallback\');\\n  return;\\n}\\n\\n\\/\\/whether the user has RTE enabled in System Settings\\n$useEditor = $modx->getOption(\'use_editor\');\\n\\/\\/is our awesome wrapper the set one?\\n$whichEditor = $modx->getOption(\'which_editor\');\\n\\/\\/whether the user has RTE set to default for all resources in System Settings\\n$richtext_default = $modx->getOption(\'richtext_default\');\\n\\n$sp = $scriptProperties;\\n\\/\\/let\'s grab a few things from our plugin\'s defualt properties property set\\n$activate = $modx->getOption(\'activateTinyMCE\', $sp);\\n$jQuerySrc = $modx->getOption(\'jQuery\', $sp);\\n$tinySrc = $modx->getOption(\'tinySrc\', $sp);\\n$newResources = $modx->getOption(\'newResources\', $sp);\\n$introtext = $modx->getOption(\'Introtext\', $sp);\\n$intro = \'\';\\n$description = $modx->getOption(\'Description\', $sp);\\n$desc = \'\';\\n$content = $modx->getOption(\'Content\', $sp);\\n$con = \'\';\\n$tvs = $modx->getOption(\'TVs\', $sp);\\n$tvAddict = $modx->getOption(\'tvAddict\', $sp);\\n$tvSuperAddict = $modx->getOption(\'tvSuperAddict\', $sp);\\n$autoFileBrowser = $modx->getOption(\'autoFileBrowser\', $sp);\\n$browserTopNAVsubtext = $modx->getOption(\'browserTopNAVsubtext\', $sp);\\n$fileImageTVs = $modx->getOption(\'fileImageTVs\', $sp);\\n$browserTVs = \'\';\\n$disable = $modx->getOption(\'disableEnableCheckbox\', $sp);\\n\\/\\/if a suffix is entered, all the chunks in use must have the same suffix. (e.g. TinymceWrapperIntrotext-suff, TinymceWrapperDescription-suff,TinymceWrapperContent-suff,TinymceWrapperTvs-suff)\\n$suffix = $modx->getOption(\'chunkSuffix\', $sp);\\n$fileManagerTopNavLink = $modx->getOption(\'fileManagerTopNavLink\', $sp);\\n\\n\\/\\/grab file browser options\\n$modxNativeBrowserRTEurl = $modx->getOption(\'modxNativeBrowserRTEurl\', $sp);\\n$modxNativeBrowserRTEtitle = $modx->getOption(\'modxNativeBrowserRTEtitle\', $sp);\\n$modxNativeBrowserTopNAVtitle = $modx->getOption(\'modxNativeBrowserTopNAVtitle\', $sp);\\n\\n$elFinderBrowserRTEurl = $modx->getOption(\'elFinderBrowserRTEurl\', $sp);\\n$elFinderBrowserRTEtitle = $modx->getOption(\'elFinderBrowserRTEtitle\', $sp);\\n$elFinderBrowserTopNAVurl = $modx->getOption(\'elFinderBrowserTopNAVurl\', $sp);\\n$elFinderBrowserTopNAVtitle = $modx->getOption(\'elFinderBrowserTopNAVtitle\', $sp);\\n$elFinderBrowserSHORTtitle = $modx->getOption(\'elFinderBrowserSHORTtitle\', $sp);\\n\\n$responsivefilemanagerBrowserRTEurl = $modx->getOption(\'responsivefilemanagerBrowserRTEurl\', $sp);\\n$responsivefilemanagerBrowserRTEtitle = $modx->getOption(\'responsivefilemanagerBrowserRTEtitle\', $sp);\\n$responsivefilemanagerBrowserTopNAVurl = $modx->getOption(\'responsivefilemanagerBrowserTopNAVurl\', $sp);\\n$responsivefilemanagerBrowserTopNAVtitle = $modx->getOption(\'responsivefilemanagerBrowserTopNAVtitle\', $sp);\\n$responsivefilemanagerBrowserSHORTtitle = $modx->getOption(\'responsivefilemanagerBrowserSHORTtitle\', $sp);\\n\\n$roxyFilemanBrowserRTEtitle = $modx->getOption(\'roxyFilemanBrowserRTEtitle\', $sp);\\n$roxyFilemanBrowserRTEurl = $modx->getOption(\'roxyFilemanBrowserRTEurl\', $sp);\\n$roxyFilemanBrowserTopNAVurl = $modx->getOption(\'roxyFilemanBrowserTopNAVurl\', $sp);\\n$roxyFilemanBrowserTopNAVtitle = $modx->getOption(\'roxyFilemanBrowserTopNAVtitle\', $sp);\\n$roxyFilemanBrowserSHORTtitle = $modx->getOption(\'roxyFilemanBrowserSHORTtitle\', $sp);\\n\\n\\/\\/this eliminates clutter and confusion: reusuable config is the way of the past and the future - code here will be put in placeholder [[+commonTinyMCECode]]\\n\\/\\/apply comma here, not in the chunk calling it\\nif ($modxEventName == \'OnManagerPageInit\' || $modxEventName == \'OnDocFormPrerender\') {\\n  $commonCode = $modx->getChunk(\'TinymceWrapperCommonCode\' . $suffix);\\n  \\/\\/ $commonCode = $commonCode ? $commonCode.\',\' : \'\';\\n  $commonCode = $commonCode ? $commonCode : \'\';\\n}\\n\\n\\/\\/when TinyMCE is temporarily disabled, any new edit is updated before saving\\n$autoSaveTextAreas = \'\\n  function autoSaveTextAreas(selectorId){\\n    setTimeout(function(){\\n      $(\\"#\\"+selectorId).on(\\"change\\", function() {\\n        tinyMCE.get(selectorId).setContent($(\\"#\\"+selectorId).val())\\n        \\/\\/ console.log(selectorId+\\" has been updated\\");\\/\\/debug stuff\\n      })\\n    },500)\\n   }\\n\';\\n\\n\\/\\/let\'s setup some functions and file select callbacks for our supported file browsers\\nswitch ($autoFileBrowser) {\\n  case \'modxNativeBrowser\':\\n    $browserRTEurl = $modxNativeBrowserRTEurl;\\n    $browserRTEtitle = $modxNativeBrowserRTEtitle;\\n    $browserTopNAVtitle = $modxNativeBrowserTopNAVtitle;\\n    break;\\n  case \'elFinderBrowser\':\\n    $browserRTEurl = \'\\"\'.$elFinderBrowserRTEurl.\'\\"\';\\n    $browserRTEtitle = $elFinderBrowserRTEtitle;\\n    $browserTopNAVurl = \'\\\\\'\'.$elFinderBrowserTopNAVurl.\'\\\\\'\';\\n    $browserTopNAVtitle = $elFinderBrowserTopNAVtitle;\\n    $browserShortTitle = $elFinderBrowserSHORTtitle;\\n    break;\\n  case \'responsivefilemanagerBrowser\':\\n    $browserRTEtitle = $responsivefilemanagerBrowserRTEtitle;\\n    $browserRTEurl = $responsivefilemanagerBrowserRTEurl;\\n    $browserTopNAVurl = $responsivefilemanagerBrowserTopNAVurl;\\n    $browserTopNAVtitle = $responsivefilemanagerBrowserTopNAVtitle;\\n    $browserShortTitle = $responsivefilemanagerBrowserSHORTtitle;\\n    break;\\n  case \'roxyFilemanBrowser\':\\n    $browserRTEtitle = $roxyFilemanBrowserRTEtitle;\\n    $browserRTEurl = $roxyFilemanBrowserRTEurl;\\n    $browserTopNAVurl = $roxyFilemanBrowserTopNAVurl;\\n    $browserTopNAVtitle = $roxyFilemanBrowserTopNAVtitle;\\n    $browserShortTitle = $roxyFilemanBrowserSHORTtitle;\\n    break;\\n}\\n\\n\\nif ($autoFileBrowser == \'responsivefilemanagerBrowser\') {\\n  $browserFunctions=\'\\n    autoFileBrowser = \\"\\";\\n    function responsive_filemanager_callback(field_id){\\n      thisFieldVal = $(\\"#\\"+field_id).val();\\n      thisFieldNum = field_id.split(\\"er\\");\\n      $(\\"input#tv\\"+thisFieldNum[1]).val(thisFieldVal);\\n      $(\\"#tv-image-preview-\\"+thisFieldNum[1]+\\" img\\").attr(\\"title\\",\\"preview by native MODx Image Browser\\");\\n      $(\\"#\\"+field_id).parents(\\".modx-tv\\").find(\\".twImagePreview\\").hide().attr(\\"src\\",thisFieldVal).insertBefore(\\"#tv-image-preview-\\"+thisFieldNum[1]).fadeIn(\\"slow\\");\\n      tinyMCE.activeEditor.windowManager.close();\\n    }\\n  \';\\n}\\nelseif ($autoFileBrowser == \'roxyFilemanBrowser\') {\\n  $browserFunctions=\'\\n    autoFileBrowser = \'.$autoFileBrowser.\';\\n      function \'.$autoFileBrowser.\'(field_name, url, type, win) {\\n        roxyFileman = \'.$browserRTEurl.\';\\n        if (roxyFileman.indexOf(\\"?\\") < 0) {\\n          roxyFileman += \\"?type=\\" + type;\\n        }\\n        else {\\n          roxyFileman += \\"&type=\\" + type;\\n        }\\n        roxyFileman += \\"&input=\\" + field_name + \\"&value=\\" + win.document.getElementById(field_name).value;\\n        if(tinyMCE.activeEditor.settings.language){\\n          roxyFileman += \\"&langCode=\\" + tinyMCE.activeEditor.settings.language;\\n        }\\n        tinyMCE.activeEditor.windowManager.open({\\n          title: \\"\'.$browserRTEtitle.\'\\",\\n          url: roxyFileman,\\n          plugins: \\"media\\",\\n          width : $(window).width()\\/1.2,\\n          height : $(window).height()\\/1.2\\n        }, {\\n          oninsert: function(url) {\\n            win.document.getElementById(field_name).value = url;\\n          }\\n        });\\n      return false;\\n      }\\n  \';\\n}\\nelse{\\n  $browserFunctions =\'\\n    autoFileBrowser = \'.$autoFileBrowser.\';\\n    function \'.$autoFileBrowser.\'(field_name, url, type, win) {\\n      tinyMCE.activeEditor.windowManager.open({\\n        title: \\"\'.$browserRTEtitle.\'\\",\\n        url: \'.$browserRTEurl.\',\\n        width : $(window).width()\\/1.2,\\n        height : $(window).height()\\/1.2\\n      }, {\\n        oninsert: function(url) {\\n          win.document.getElementById(field_name).value = url;\\n        }\\n      });\\n    return false;\\n    }\\n  \';\\n}\\n\\n\\n\\n\\/\\/lock the below to this event, to prevent spill over\\nif ($modxEventName == \'OnDocFormPrerender\') {\\n  \\/\\/let\'s expose the RFM rootfolder url for TinyMCE\'s external filemanager plugins for the chunks to access\\n\\n  $enableDisableTiny = \'\';\\n  \\/\\/is the enable\\/disable TinyMCE option selected? If so, let\'s create all the buttons at once; this will be split later on. This is good for TVs that have default content, and user wishes to revert. Disable TinyMCE, then revert.\\n  \\/\\/there are two $(\\"#ta\\") below; don\'t ask me why the Articles\' Container\\/Child are has own thing going own here\\n  if ($disable == 1) {\\n  \\/\\/prepend is better than append - you\'ll see!!!\\n    $disableTitle = \'Disable TinyMCE\';\\n    $enableDisableTiny = \'\\n    $(\\"#modx-resource-introtext\\").parent().parent().prepend(\\"<input data-tiny=\\\\\'modx-resource-introtext\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");@\\n    $(\\"#modx-resource-description\\").parent().parent().prepend(\\"<input data-tiny=\\\\\'modx-resource-description\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");@\\n    $(\\"#ta\\").parents(\\"#modx-resource-content\\").find(\\".x-panel-header-text\\").prepend(\\"<input data-tiny=\\\\\'ta\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");\\n    if($(\\"#articles-box-publishing-information\\").length){\\n      $(\\"#ta\\").parents(\\".contentblocks_replacement\\").find(\\"label[for=ta]\\").prepend(\\"<input data-tiny=\\\\\'ta\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");\\n    }\\n    if($(\\"#modx-resource-tabs__articles-tab-template\\").length){\\n      $(\\"#modx-resource-header\\").append(\\"<p id=\\\\\'tinyArtAlert\\\\\' style=\\\\\'width:70%;margin:0 auto;background-color:#32AB9A;padding:10px;border-radius:10px;color:white;text-align:center;\\\\\'><b>TinyMCE Wrapper Raw Code Protection:<\\/b><br>Check this Articles Container > Template [Tab] > Content, before saving.<br>Unchecking the box will not only disable but remove TinyMCE, thus protecting your code<\\/p>\\");\\n      $(\\"#ta\\").parent().parent().find(\\"label[for=ta]\\").prepend(\\"<input data-tiny=\\\\\'ta\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'Remove TinyMCE \\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVchecky\\\\\' onclick=\\\\\'javascript:tinymce.get(\\\\\\"ta\\\\\\").remove();$(this).remove();$(\\\\\\"#tinyArtAlert\\\\\\").fadeOut().remove();\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");\\n    }\\n  \';\\n  \\/\\/let\'s split the enable\\/disable checkboxes so that they don\'t appear randomly or unexpectedly\\n  $enableDisableTiny = explode(\\"@\\", $enableDisableTiny);\\n  \\/\\/what happens when you click the enable\\/disable checkbox\\n  $enableDisableTinyClick = \'\\n    $(\\".tinyTVcheck\\").mousedown(function() {\\n      autoSaveTextAreas($(this).attr(\\"data-tiny\\"));\\n      if (this.checked) {\\n        tinymce.get($(this).attr(\\"data-tiny\\")).hide();\\n        $(this).trigger(\\"change\\").attr(\\"title\\",\\"Enable TinyMCE\\");\\n      }\\n      else{\\n        tinymce.get($(this).attr(\\"data-tiny\\")).show();\\n        $(this).trigger(\\"change\\").attr(\\"title\\",\\"\'.$disableTitle.\'\\");\\n      }\\n      });\';\\n  }\\n\\n  \\/\\/All TVs are here nicely placed independent of strict conditions, just in case we want to activate TVS even when RTE is disabled for a particular resource\\n  if ($tvs == 1) {\\n    $tvsChunk = $modx->getChunk(\'TinymceWrapperTVs\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n    if ($tvsChunk) {\\n      \\/\\/let\'s remove the checkboxes that enables\\/disables TinyMCE for the TVs\\n      \\/\\/let\'s allow the TV reset button to work through TinyMCE, either enabled or disabled - textareas are updated .on change + the delay is neccesary since we are pseudo binding to existing click event\\n      if ($disable == 1) {\\n        $richTv = \'\\n        if($(\\".modx-richtext\\").length){\\n          function updateReset(updateR){\\n            setTimeout(function(){\\n              tinyMCE.get(updateR).setContent($(\\"#\\"+updateR).val());\\n              \\/\\/ console.log(updateR+\\" has been updated\\");\\/\\/debug stuff\\n            },200)\\n          }\\n          $.each($(\\".modx-richtext\\"), function() {\\n            updateR = $(this).attr(\\"id\\");\\n          $(this).parent().parent().find(\\".modx-tv-reset\\").on(\\"click\\", function(){\\n            updateReset($(this).attr(\\"data-tiny\\"));\\n          });\\n          $(this).parent().parent().prepend(\\"<input data-tiny=\\\\\'\\"+this.id+\\"\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'Disable TinyMCE\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>\\");\\n          $(this).parent().parent().find(\\".modx-tv-reset\\").attr(\\"data-tiny\\",this.id)\\n          });\\n        setTimeout(function(){\\n          \' . $tvsChunk . \'\\n        },1000);\\n        }\\n        \';\\n      } \\n      else {\\n        $richTv = \'\\n        if($(\\".modx-richtext\\").length){\\n          $.each($(\\".modx-richtext\\"), function() {\\n          $(this).parent().parent().find(\\".modx-tv-reset\\").on(\\"click\\", function(){$(this).change()});\\n            });\\n        setTimeout(function(){\\n          \' . $tvsChunk . \'\\n        },1000);\\n        }\';\\n      }\\n    }\\n  }\\n  if ($fileImageTVs == 1) {\\n    \\/*\\n    - RFM callback when an item is clicked\\n    - provide two ways to pop up RFM; the TInyMCE way is neater and more uniform\\n    - append hidden input#tinyFileImageBrowser to the body so that we have at least one active editor, in case the user has disabled TinyMCE for all other textareas and TVs\\n    - do some magic: create the respective image and file RFM buttons with appropriate properties when the page is really ready\\n    - create rudimentary image prev something similar to the native MODx\' file browser\\n    - init hidden #tinyFileImageBrowser\\n    - Create tinymce #tinyFileImageBrowser on condition; give a definite CSS theme (only when one is not already loaded) to avoid overriding issues. Allow cross-browser amiability by setting to inline:true\\n    - make rfmTinyPopup popup somewhat responsive\\n    - add RFM menu button to MODx Media drop down - depends on the option fileImageTvs\\n    *\\/\\n    $browserTVs = \'\\n      function imageFileTVpop(field_name, url, type, win) {\\n        thisUrl = \'.$browserRTEurl.\';\\n        if (thisUrl.indexOf(\\"dialog\\") > 0) {\\n            thisUrl = thisUrl.replace(\\"popup=1\\", \\"popup=0\\");\\n          if (thisUrl.indexOf(\\"?\\") < 0) {\\n            thisUrl += \\"?field_id=\\"+field_name;\\n          }\\n          else {\\n            thisUrl += \\"&field_id=\\"+field_name;\\n          }\\n        }\\n        tinyMCE.activeEditor.windowManager.open({\\n          title: \\"\'.$browserRTEtitle.\'\\",\\n          url: thisUrl,\\n          width : $(window).width()\\/1.2,\\n          height : $(window).height()\\/1.2\\n        }, {\\n          oninsert: function(url) {\\n            $(\\"#\\"+field_name).val(url);\\n            thisFieldNum = field_name.split(\\"er\\");\\n            $(\\"input#tv\\"+thisFieldNum[1]).val(url);\\n            $(\\"#tv-image-preview-\\"+thisFieldNum[1]+\\" img\\").attr(\\"title\\",\\"preview by \'.$browserShortTitle.\'\\");\\n            $(\\"#\\"+field_name).parents(\\".modx-tv\\").find(\\".twImagePreview\\").hide().attr(\\"src\\",url).insertBefore(\\"#tv-image-preview-\\"+thisFieldNum[1]).fadeIn(\\"slow\\");\\n            tinyMCE.activeEditor.windowManager.close();\\n          }\\n        });\\n      return false;\\n      }\\n      Ext.onReady(function(){\\n       setTimeout(function(){\\n         $(\\"body\\").append(\\"<input id=\\\\\'tinyFileImageBrowser\\\\\' type=\\\\\'hidden\\\\\' value=\\\\\'\\\\\' \\/>\\");\\n         $(\\"input[id^=tvbrowser]\\").each(function(){\\n        fileOrImage = $(this).parents(\\".modx-tv\\").find(\\".x-form-file-trigger\\").attr(\\"id\\");\\n        if($(\\"#\\"+fileOrImage).length){\\n        twImageFileOnClick = \\"imageFileTVpop($(this).attr(\\\\\'data-tiny\\\\\'))\\";\\n        twImageFileBtn = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;(all&nbsp;files)&nbsp;\\\\\';\\n        twImageFileBtnTitle = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;All-File&nbsp;Browser&nbsp;\\\\\';\\n        twImagePreview = \\"\\";\\n          }\\n          else{\\n        twImageFileOnClick = \\"imageFileTVpop($(this).attr(\\\\\'data-tiny\\\\\'))\\";\\n        twImageFileBtn = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;(images)&nbsp;\\\\\';\\n        twImageFileBtnTitle = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;Image-Only&nbsp;Browser&nbsp;\\\\\';\\n        twImagePreview = \\"<img class=\\\\\'twImagePreview\\\\\' title=\\\\\'preview by \'.$browserShortTitle.\' Image Browser\\\\\' src=\\\\\'\\\\\' style=\\\\\'width:100px;display:none;\\\\\' \\/>\\";\\n          }\\n          $(this).parents(\\".x-form-item\\")\\n          .find(\\".modx-tv-caption\\")\\n          .parent()\\n          .prepend(\\"<input class=\\\\\'twImageFileBtnClass x-form-field-wrap x-form-trigger\\\\\' data-tiny=\\"+this.id+\\" type=\\\\\'button\\\\\' value=\\"+twImageFileBtn+\\" title=\\"+twImageFileBtnTitle+\\" onclick=\\"+twImageFileOnClick+\\">\\"+twImagePreview);\\n          if(tinymce.editors.length < 1){\\n            tinymce.init({\\n              selector: \\"#tinyFileImageBrowser\\",\\n              skin_url: MODx.config.assets_url+\\"components\\/tinymcewrapper\\/tinymceskins\\/fairOphelia\\",\\n              inline:true,\\n              forced_root_block : \\"\\",\\n              force_br_newlines : false,\\n              force_p_newlines : false\\n            })\\n          }\\n        })\\n        },1000);\\n      })\\n    \';\\n    if($autoFileBrowser ==\'modxNativeBrowser\'){\\n      $browserTVs = \'\';\\n    }\\n  }\\n}\\n\\n\\/\\/if user selects the option to activate this wrapper, we save him\\/her the trip of heading to System Settings - is this being too officious or intrusive?\\nif ($activateTinyMCE == 1) {\\n  if ($useEditor !== 1 || $whichEditor !== \'TinymceWrapper\') {\\n    $use = $modx->getObject(\'modSystemSetting\', \'use_editor\');\\n    $use->set(\'value\', 1);\\n    $use->save();\\n    $which = $modx->getObject(\'modSystemSetting\', \'which_editor\');\\n    $which->set(\'value\', \'TinymceWrapper\');\\n    $which->save();\\n  }\\n  \\/\\/leave all elements alone - attack only resources\\nif ($modxEventName == \'OnDocFormPrerender\') {\\n    \\n    \\/\\/check if user wants to load TinyMCE for New Resources\\n      $loadTiny = 0; \\/\\/default\\n    if(isset($scriptProperties[\'resource\']) && $resource->get(\'richtext\')) { \\/\\/existing resource with RTE clicked\\n      $loadTiny = 1;\\n      }\\n    if($loadTiny == 0 && $newResources == 1 && $richtext_default == 1 && !isset($scriptProperties[\'resource\'])) {\\n      $loadTiny = 1;\\n    }\\n\\n    if ($loadTiny == 1) {\\n      \\/\\/should we load jQuery?\\n      if ($jQuerySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n      }\\n      \\/\\/should we load TinyMCE (from CDN or assets folder)?\\n      if ($tinySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n      }\\n      \\/\\/let\'s init introtext, description and content textareas only if user has specified so in this plugin\'s properties\\n      if ($introtext == 1) {\\n        $introChunk = $modx->getChunk(\'TinymceWrapperIntrotext\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n        if ($introChunk) {\\n          $intro = $enableDisableTiny[0] . $introChunk;\\n        }\\n      }\\n      if ($description == 1) {\\n        $descChunk = $modx->getChunk(\'TinymceWrapperDescription\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n        if ($descChunk) {\\n          $desc = $enableDisableTiny[1] . $descChunk;\\n        }\\n      }\\n      if ($content == 1) {\\n        $conChunk = $modx->getChunk(\'TinymceWrapperContent\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n        if ($conChunk) {\\n          $con = $enableDisableTiny[2] . $conChunk;\\n        }\\n      }\\n      \\/\\/all textareas depend on whether the Resource is Rich Text-enabled. We use so many IFs to protect against error\\n      \\/\\/any and all Rich TVs + File and Image TVs will now be initiated\\n      \\/\\/Now let\'s do the real init of all textareas\\n      \\/\\/seems Ext.onReady is better than setTimeout, delay of 400\\n      $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $autoSaveTextAreas . $browserTVs . \\"Ext.onReady(function () {\\" . $intro . $desc . $con . $richTv . $enableDisableTinyClick . \\"});<\\/script>\\");\\n    }\\n    \\/\\/let\'s see if the person wants TVs activated even when RTE is disabled for the Resource.\\n    elseif (isset($scriptProperties[\'resource\']) && !$resource->get(\'richtext\')) {\\n        if ($tvAddict == 1) {\\n          if ($jQuerySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n          }\\n          if ($tinySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n          }\\n          $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $autoSaveTextAreas . $browserTVs . \\"Ext.onReady(function () {\\" . $richTv . $enableDisableTinyClick . \\"});<\\/script>\\");\\n        }\\n    }\\n  }\\n}\\nelse{\\n  if ($modxEventName == \'OnDocFormPrerender\') {\\n        if ($tvSuperAddict == 1) {\\n          if ($jQuerySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n          }\\n          if ($tinySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n          }\\n          $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $autoSaveTextAreas . $browserTVs . \\"Ext.onReady(function () {\\" . $richTv . $enableDisableTinyClick . \\"});<\\/script>\\");\\n        }\\n  }\\n}\\n\\nif ($modxEventName == \'OnManagerPageInit\' || $modxEventName == \'OnDocFormPrerender\') {\\n  $mediaPopUp =\'\';\\n  if ($fileManagerTopNavLink == 1 && $autoFileBrowser !== \'modxNativeBrowser\') {\\n    \\/\\/ inject file browser link to Manager Top Nav Media dropdown\\n    $mediaPopUp = \'\\n      function mediaPopup(url)\\n        {\\n          var w = 880;\\n          var h = 570;\\n          var l = Math.floor((screen.width-w)\\/2);\\n          var t = Math.floor((screen.height-h)\\/2);\\n          var win = window.open(url, \\"\\", \\"scrollbars=1,width=\\" + w + \\",height=\\" + h + \\",top=\\" + t + \\",left=\\" + l);\\n        }\\n\\n      taskCounter = 0;\\n      var linkCheck = setInterval(function(){\\n        \\/\\/requires no jQuery or TinyMCE - will work even if activateTinyMCE is false\\n        var fileBrowserBro = document.getElementById(\\"file_browser\\");\\n        if(fileBrowserBro){\\n          taskCounter++;\\n          fileBrowserBro.insertAdjacentHTML( \\"afterbegin\\", \\"<li><a href=\\\\\\"javascript:;\\\\\\" onclick=\\\\\\"mediaPopup(\'.$browserTopNAVurl.\')\\\\\\">\'.$browserTopNAVtitle.\'<span class=\\\\\\"description\\\\\\">\'.$browserTopNAVsubtext.\'<\\/span><\\/a><\\/li>\\");\\n        }\\n        if(taskCounter = 1)\\n          {clearInterval(linkCheck);\\n          }\\n      },1000);\\n    \';\\n     $modx->regClientStartupHTMLBlock(\\"<script>\\" . $mediaPopUp . \\"<\\/script>\\");\\n  }\\n\\n  \\/\\/let\'s catch only the textarea[content] when it is created. You can use livejquery or arrive.js if you like\\n  \\/\\/make it non-obstrusive - mouseenter seems better tan mouseout - works when modal pops and cursor is already on the textarea\\n\\n  $quickUpdateCreate = $modx->getOption(\'quickUpdateCreate\', $sp);\\n  $quick = \'\';\\n  $quickChunk = $modx->getChunk(\'TinymceWrapperQuickUpdate\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n\\n  if ($quickChunk) {\\n    $quick = $quickChunk;\\n  }\\n  if ($quickUpdateCreate == 1){\\n    \\/\\/do not load these twice when resources are being edited\\n    if ($modxEventName == \'OnManagerPageInit\') {\\n      if ($jQuerySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n      }\\n      if ($tinySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n      }\\n    }\\n\\n    $quickUpdateTinyMCE = \'\\n      $(document).on(\\"mouseenter\\", \\".modx-window\\", function () {\\n        tinyContent = $(this).find(\\"textarea[name=content]\\");\\n        quickyId = \\"#\\"+tinyContent.attr(\\"id\\");\\n        dataTiny = tinyContent.attr(\\"id\\");\\n        \\/\\/ if ($(this).has(\\"textarea[name=content]\\").length){\\/\\/will catch Quick edit files from server\\n        if ($(this).has(\\"input[name=published]\\").length && $(this).has(\\"textarea[name=content]\\").length){\\n          if ($(this).has(\\".tinyEn\\").length){\\n          }\\n          else{\\n          \\/\\/ tinyContent.parent().parent().find(\\"label\\").prepend(\\"<button class=\\\\\'tinyEn x-form-field-wrap x-form-trigger\\\\\' onclick=enableTiny(quickyId,dataTiny)>Edit with TinyMCE?<\\/button>&nbsp;&nbsp;&nbsp;\\");\\n          $(this).find(\\".x-toolbar-left-row\\").prepend(\\"<p onclick=enableTiny(quickyId,dataTiny) class=\\\\\'x-btn x-btn-small x-btn-icon-small-left x-btn-noicon\\\\\' unselectable=\\\\\'on\\\\\'><em><button class=\\\\\'tinyEn x-btn-text\\\\\'>Edit with TinyMCE<\\/button><\\/em><\\/p>\\");\\n          $(this).find(\\".tinyEn\\").attr(\\"data-tiny\\",dataTiny);\\n          \\/\\/ $(this).find(\\"button:contains(\\\\\'Close\\\\\')\\").first().attr(\\"data-tiny\\",\\"close-\\"+dataTiny);\\n          \\/\\/ $(this).find(\\"button:contains(\\\\\'Save\\\\\')\\").first().attr(\\"data-tiny\\",\\"save-\\"+dataTiny);\\n          }\\n        }\\n      \\/\\/ })\\n      \\/\\/ .on(\\"mouseout\\", tinymce.activeEditor, function () {\\n        \\/\\/ if(tinymce.editors.length > 1){}\\n        \\/\\/ if (tinyMCE.activeEditor !== null){\\n        \\/\\/   if(tinyMCE.activeEditor.isHidden() != true){\\n        \\/\\/     tinyMCE.activeEditor.save();\\n        \\/\\/     javascript:console.log(\\"saved\\");\\n        \\/\\/   }\\n        \\/\\/ }\\n      });\\n      function enableTiny(quickyId,id){\\n        enableTinyInit(quickyId);\\n        id = dataTiny;\\n        $(\\"button[data-tiny=\\\\\'\\"+id+\\"\\\\\']\\").html(\\"Disable TinyMCE\\").parent().parent().attr(\\"onclick\\",\\"disTiny(dataTiny)\\");\\n      }\\n      function disTiny(dataTiny){\\n        dataTiny = dataTiny;\\n        tinymce.get(dataTiny).hide();\\n        $(\\"button[data-tiny=\\\\\'\\"+dataTiny+\\"\\\\\']\\").html(\\"Enable TinyMCE\\").parent().parent().attr(\\"onclick\\",\\"enTiny(dataTiny)\\");\\n      }\\n      function enTiny(dataTiny){\\n        dataTiny = dataTiny;\\n        tinymce.get(dataTiny).show();\\n        $(\\"button[data-tiny=\\\\\'\\"+dataTiny+\\"\\\\\']\\").html(\\"Disable TinyMCE\\").parent().parent().attr(\\"onclick\\",\\"disTiny(dataTiny)\\");\\n      }\\n      function enableTinyInit(quickyId){\\n        $(quickyId).parents(\\".modx-window\\").find(\\".x-tab-panel-body.x-tab-panel-body-top\\").css({\\"overflow\\":\\"hidden\\",\\"overflow-y\\":\\"auto\\"});\\n        \' .$quick. \'\\n      }\\n      \';\\n      $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $quickUpdateTinyMCE . \\"<\\/script>\\");\\n  }\\n}","locked":0,"properties":"a:34:{s:15:\\"activateTinyMCE\\";a:7:{s:4:\\"name\\";s:15:\\"activateTinyMCE\\";s:4:\\"desc\\";s:251:\\"To work, this has to be set to Yes; this plugin will then disable whatever RTE you might have used before now.If set to false, with tvSuperAddict you can use Responsive FileManager for your File\\/Image TVs, and also use TinyMCE(CDN) for RichTextareaTVs\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:11:\\"chunkSuffix\\";a:7:{s:4:\\"name\\";s:11:\\"chunkSuffix\\";s:4:\\"desc\\";s:280:\\"This plugin will create six chunks for you; it will not override them once created, but you were better off duplicating them.\\nPLEASE simply add a suffix (_test or -su) to your new name.\\nTinymceWrapperIntrotext becomes TinymceWrapperIntrotext-test or TinymceWrapperIntrotext-suffix\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:21:\\"disableEnableCheckbox\\";a:7:{s:4:\\"name\\";s:21:\\"disableEnableCheckbox\\";s:4:\\"desc\\";s:253:\\"Do you want a checkbox to appear before every TinyMCE textarea, to quickly disable\\/enable a particular TinyMCE?\\nNOTE: Any changes you make while TinyMCE is disabled will not be saved, UNLESS you re-enable TinyMCE after the change is made, before saving.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:21:\\"fileManagerTopNavLink\\";a:7:{s:4:\\"name\\";s:21:\\"fileManagerTopNavLink\\";s:4:\\"desc\\";s:245:\\"Add custom File Manager link to Manager Top Nav > Media drop-down menu (Vanilla JS, no jQuery or TinyMCE loaded).\\nThis will work whether you are using RTE or not, that is, even if activateTinyMCE is set to false; wherever you are in the Manager.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:6:\\"jQuery\\";a:7:{s:4:\\"name\\";s:6:\\"jQuery\\";s:4:\\"desc\\";s:118:\\"This plugin requires jQuery in the order that it is loaded. Leave blank if you already have it running in the Manager.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:43:\\"https:\\/\\/code.jquery.com\\/jquery-2.1.3.min.js\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:12:\\"newResources\\";a:7:{s:4:\\"name\\";s:12:\\"newResources\\";s:4:\\"desc\\";s:173:\\"If you set richtext_default in System Settings, new resources will have the RTE clicked automatically.\\nDo you want TinyMCE to load also, automatically, for the new resource?\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:7:\\"tinySrc\\";a:7:{s:4:\\"name\\";s:7:\\"tinySrc\\";s:4:\\"desc\\";s:229:\\"You may use either TinyMCE\\"s CDN or TinyMCE located on your own folder\\n\\/\\/tinymce.cachefly.net\\/4.2\\/tinymce.min.js\\n(other CDN versions 4, 4.0, 4.1, 4.2)\\n                      OR\\n[[++assets_url]]yourTinymce\\/js\\/tinymce\\/tinymce.min.js\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:41:\\"\\/\\/tinymce.cachefly.net\\/4.2\\/tinymce.min.js\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:8:\\"tvAddict\\";a:7:{s:4:\\"name\\";s:8:\\"tvAddict\\";s:4:\\"desc\\";s:187:\\"Do you want your TVs (Rich\\/File\\/Image) to be wrapperjacked by this plugin even if you have RTE disabled for the particular resource? This will work even in the Articles Extra (hopefully!)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:13:\\"tvSuperAddict\\";a:7:{s:4:\\"name\\";s:13:\\"tvSuperAddict\\";s:4:\\"desc\\";s:201:\\"Even though you have another RTE in use (that is, you have set activateTinyMCE to false), you can still use Responsive FileManager for your File\\/Image TVs, and also use TinyMCE(CDN) for RichTextareaTVs\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:18:\\"00 Editor Settings\\";}s:7:\\"Content\\";a:7:{s:4:\\"name\\";s:7:\\"Content\\";s:4:\\"desc\\";s:36:\\"Transform Resource Content textarea?\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"Yes\\";s:5:\\"value\\";s:3:\\"Yes\\";}i:1;a:2:{s:4:\\"text\\";s:2:\\"No\\";s:5:\\"value\\";s:2:\\"No\\";}}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:25:\\"01 Textareas to transform\\";}s:11:\\"Description\\";a:7:{s:4:\\"name\\";s:11:\\"Description\\";s:4:\\"desc\\";s:31:\\"Transform Description textarea?\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"Yes\\";s:5:\\"value\\";s:3:\\"Yes\\";}i:1;a:2:{s:4:\\"text\\";s:2:\\"No\\";s:5:\\"value\\";s:2:\\"No\\";}}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:25:\\"01 Textareas to transform\\";}s:9:\\"Introtext\\";a:7:{s:4:\\"name\\";s:9:\\"Introtext\\";s:4:\\"desc\\";s:29:\\"Transform Introtext textarea?\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"Yes\\";s:5:\\"value\\";s:3:\\"Yes\\";}i:1;a:2:{s:4:\\"text\\";s:2:\\"No\\";s:5:\\"value\\";s:2:\\"No\\";}}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:25:\\"01 Textareas to transform\\";}s:3:\\"TVs\\";a:7:{s:4:\\"name\\";s:3:\\"TVs\\";s:4:\\"desc\\";s:28:\\"Transform Rich TVs textarea?\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:25:\\"01 Textareas to transform\\";}s:12:\\"fileImageTVs\\";a:7:{s:4:\\"name\\";s:12:\\"fileImageTVs\\";s:4:\\"desc\\";s:174:\\"You will be able to use Responsive FileManager to input data in your File and Image TVs, hurray! The native method will still be there; at least now you have awesome choices.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:25:\\"01 Textareas to transform\\";}s:17:\\"quickUpdateCreate\\";a:7:{s:4:\\"name\\";s:17:\\"quickUpdateCreate\\";s:4:\\"desc\\";s:204:\\"Tested only in Revo 2.3.5. Now you can use TinyMCE to edit\\/create as many resources as you want at the same time, in the same browser window, thanks to MODx\\" Quick Update\\/Create and TinyMCE\\"s flexibility.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:25:\\"01 Textareas to transform\\";}s:15:\\"autoFileBrowser\\";a:7:{s:4:\\"name\\";s:15:\\"autoFileBrowser\\";s:4:\\"desc\\";s:263:\\"Please select which awesome file browser to use. Default is MODx\'. If you activate Responsive FileManager, be sure to activate it in your TinyMCE config. In this case go to TinymceWrapperCommonCode and uncomment from \\/*external filebrowser to bottom of the chunk.\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"text\\";s:17:\\"modxNativeBrowser\\";s:5:\\"value\\";s:17:\\"modxNativeBrowser\\";}i:1;a:2:{s:4:\\"text\\";s:15:\\"elFinderBrowser\\";s:5:\\"value\\";s:15:\\"elFinderBrowser\\";}i:2;a:2:{s:4:\\"text\\";s:28:\\"responsivefilemanagerBrowser\\";s:5:\\"value\\";s:28:\\"responsivefilemanagerBrowser\\";}i:3;a:2:{s:4:\\"text\\";s:18:\\"roxyFilemanBrowser\\";s:5:\\"value\\";s:18:\\"roxyFilemanBrowser\\";}}s:5:\\"value\\";s:17:\\"modxNativeBrowser\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:17:\\"02 Browser Config\\";}s:20:\\"browserTopNAVsubtext\\";a:7:{s:4:\\"name\\";s:20:\\"browserTopNAVsubtext\\";s:4:\\"desc\\";s:55:\\"Slogan to appear in your Manager Top Nav dropdown menu.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:24:\\"Wonderfully Manage Media\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:17:\\"02 Browser Config\\";}s:23:\\"elFinderBrowserRTEtitle\\";a:7:{s:4:\\"name\\";s:23:\\"elFinderBrowserRTEtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:24:\\"elFinder Awesome Browser\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:22:\\"03 Browsers - elFinder\\";}s:21:\\"elFinderBrowserRTEurl\\";a:7:{s:4:\\"name\\";s:21:\\"elFinderBrowserRTEurl\\";s:4:\\"desc\\";s:262:\\"[[~[[TinymceWrapperGRF? &knownField=`pagetitle` &kF=`pagetitle` &kFv=`elfinder` &gNuFv=`id`]]? &scheme=`full` &rememberLastDir=`1` &defaultView=`icons` &unlocked=`1`]].....Replace ***with*** tw-elfinder-browser.html?unlocked=1&rememberLastDir=1&defaultView=icons\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:178:\\"[[~[[TinymceWrapperGRF? &knownField=`pagetitle` &kF=`pagetitle` &kFv=`tw_elfinder_browser` &gNuFv=`id`]]? &scheme=`full` &rememberLastDir=`1` &defaultView=`icons` &unlocked=`1`]]\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:22:\\"03 Browsers - elFinder\\";}s:25:\\"elFinderBrowserSHORTtitle\\";a:7:{s:4:\\"name\\";s:25:\\"elFinderBrowserSHORTtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"elFinder\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:22:\\"03 Browsers - elFinder\\";}s:26:\\"elFinderBrowserTopNAVtitle\\";a:7:{s:4:\\"name\\";s:26:\\"elFinderBrowserTopNAVtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:21:\\"elFinder File Browser\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:22:\\"03 Browsers - elFinder\\";}s:24:\\"elFinderBrowserTopNAVurl\\";a:7:{s:4:\\"name\\";s:24:\\"elFinderBrowserTopNAVurl\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:178:\\"[[~[[TinymceWrapperGRF? &knownField=`pagetitle` &kF=`pagetitle` &kFv=`tw_elfinder_browser` &gNuFv=`id`]]? &scheme=`full` &rememberLastDir=`1` &defaultView=`icons` &unlocked=`1`]]\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:22:\\"03 Browsers - elFinder\\";}s:25:\\"modxNativeBrowserRTEtitle\\";a:7:{s:4:\\"name\\";s:25:\\"modxNativeBrowserRTEtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:24:\\"MODx Native File Browser\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"04 Browsers - MODx Browser\\";}s:23:\\"modxNativeBrowserRTEurl\\";a:7:{s:4:\\"name\\";s:23:\\"modxNativeBrowserRTEurl\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:123:\\"MODx.config[\\"manager_url\\"] + \\"index.php?a=\\" + MODx.action[\\"browser\\"] + \\"&amp;source=\\" + MODx.config[\\"default_media_source\\"]\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"04 Browsers - MODx Browser\\";}s:36:\\"responsivefilemanagerBrowserRTEtitle\\";a:7:{s:4:\\"name\\";s:36:\\"responsivefilemanagerBrowserRTEtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:22:\\"Responsive FileManager\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:36:\\"05 Browsers - Responsive FileManager\\";}s:34:\\"responsivefilemanagerBrowserRTEurl\\";a:7:{s:4:\\"name\\";s:34:\\"responsivefilemanagerBrowserRTEurl\\";s:4:\\"desc\\";s:142:\\"MODx.config.assets_url+\\"components\\/tinymcewrapper\\/responsivefilemanager\\/filemanager\\/dialog.php?type=0&popup=1\\" ... &popup parameter is present\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:110:\\"MODx.config.assets_url+\\"components\\/tinymcewrapper\\/responsivefilemanager\\/filemanager\\/dialog.php?type=0&popup=1\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:36:\\"05 Browsers - Responsive FileManager\\";}s:38:\\"responsivefilemanagerBrowserSHORTtitle\\";a:7:{s:4:\\"name\\";s:38:\\"responsivefilemanagerBrowserSHORTtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:3:\\"RFM\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:36:\\"05 Browsers - Responsive FileManager\\";}s:39:\\"responsivefilemanagerBrowserTopNAVtitle\\";a:7:{s:4:\\"name\\";s:39:\\"responsivefilemanagerBrowserTopNAVtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:22:\\"Responsive FileManager\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:36:\\"05 Browsers - Responsive FileManager\\";}s:37:\\"responsivefilemanagerBrowserTopNAVurl\\";a:7:{s:4:\\"name\\";s:37:\\"responsivefilemanagerBrowserTopNAVurl\\";s:4:\\"desc\\";s:129:\\"MODx.config.assets_url+\\\\\'components\\/tinymcewrapper\\/responsivefilemanager\\/filemanager\\/dialog.php?type=0\\\\\'  has no &popup parameter\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:104:\\"MODx.config.assets_url+\\\\\'components\\/tinymcewrapper\\/responsivefilemanager\\/filemanager\\/dialog.php?type=0\\\\\'\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:36:\\"05 Browsers - Responsive FileManager\\";}s:26:\\"roxyFilemanBrowserRTEtitle\\";a:7:{s:4:\\"name\\";s:26:\\"roxyFilemanBrowserRTEtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:12:\\"Roxy Fileman\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"06 Browsers - Roxy Fileman\\";}s:24:\\"roxyFilemanBrowserRTEurl\\";a:7:{s:4:\\"name\\";s:24:\\"roxyFilemanBrowserRTEurl\\";s:4:\\"desc\\";s:67:\\"MODx.config.assets_url+\\"components\\/tinymcewrapper\\/fileman\\/roxy.php\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:72:\\"MODx.config.assets_url+\\"components\\/tinymcewrapper\\/roxy\\/fileman\\/roxy.php\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"06 Browsers - Roxy Fileman\\";}s:28:\\"roxyFilemanBrowserSHORTtitle\\";a:7:{s:4:\\"name\\";s:28:\\"roxyFilemanBrowserSHORTtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"Roxy\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"06 Browsers - Roxy Fileman\\";}s:29:\\"roxyFilemanBrowserTopNAVtitle\\";a:7:{s:4:\\"name\\";s:29:\\"roxyFilemanBrowserTopNAVtitle\\";s:4:\\"desc\\";s:0:\\"\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:12:\\"Roxy Fileman\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"06 Browsers - Roxy Fileman\\";}s:27:\\"roxyFilemanBrowserTopNAVurl\\";a:7:{s:4:\\"name\\";s:27:\\"roxyFilemanBrowserTopNAVurl\\";s:4:\\"desc\\";s:69:\\"MODx.config.assets_url+\\\\\'components\\/tinymcewrapper\\/fileman\\/roxy.php\\\\\'\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:74:\\"MODx.config.assets_url+\\\\\'components\\/tinymcewrapper\\/roxy\\/fileman\\/roxy.php\\\\\'\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:26:\\"06 Browsers - Roxy Fileman\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/*TinymceWrapper transforms textareas (introtext, description, content, RichTVs, File\\/Image TVs, Quick Update\\/Create, MIGX TVs.\\n\\nplugin fires at\\nOnRichTextEditorRegister\\nOnDocFormPrerender \\n\\nFOR ALL ROUND ENJOYMENT THROUGH OUT THE MANANGER\\n(quick update\\/create resources, link for many custom file browsers in top nav, MIGX CMPS)\\nOnManagerPageInit\\n\\nDON\'T WORRY, YOUR SITE WILL NOT BE SLOW ON ACCOUNT OF THIS PLUGIN\\n\\n-------------------Roadmap:\\n-Create more beautiful themes;\\n-Look for more ways to be awesome;\\n---------------------------\\n\\nUse freely, recode freely, report freely, enjoy freely\\nDedicated to those who have cried\\n---------------------------\\n\\nhttp:\\/\\/www.leofec.com\\/modx-revolution\\/\\n-donshakespeare in the MODx forum\\n*\\/\\n$modx->getService(\'error\',\'error.modError\', \'\', \'\');\\n$modxEventName = $modx->event->name;\\n\\/\\/let us tell System Settings that we have a new RTEditor\\nif ($modxEventName == \'OnRichTextEditorRegister\') {\\n  $modx->event->output(\'TinymceWrapper\');\\n  return;\\n}\\n\\n\\/\\/let us get MODx browser callback ready to fire\\nif ($modxEventName == \'OnRichTextBrowserInit\' && $autoFileBrowser == \'modxNativeBrowser\') {\\n $modx->controller->addJavascript(MODX_ASSETS_URL.\'components\\/tinymcewrapper\\/browserConnectors\\/browser.js\');\\n  $modx->event->output(\'twBrowserCallback\');\\n  return;\\n}\\n\\n\\/\\/whether the user has RTE enabled in System Settings\\n$useEditor = $modx->getOption(\'use_editor\');\\n\\/\\/is our awesome wrapper the set one?\\n$whichEditor = $modx->getOption(\'which_editor\');\\n\\/\\/whether the user has RTE set to default for all resources in System Settings\\n$richtext_default = $modx->getOption(\'richtext_default\');\\n\\n$sp = $scriptProperties;\\n\\/\\/let\'s grab a few things from our plugin\'s defualt properties property set\\n$activate = $modx->getOption(\'activateTinyMCE\', $sp);\\n$jQuerySrc = $modx->getOption(\'jQuery\', $sp);\\n$tinySrc = $modx->getOption(\'tinySrc\', $sp);\\n$newResources = $modx->getOption(\'newResources\', $sp);\\n$introtext = $modx->getOption(\'Introtext\', $sp);\\n$intro = \'\';\\n$description = $modx->getOption(\'Description\', $sp);\\n$desc = \'\';\\n$content = $modx->getOption(\'Content\', $sp);\\n$con = \'\';\\n$tvs = $modx->getOption(\'TVs\', $sp);\\n$tvAddict = $modx->getOption(\'tvAddict\', $sp);\\n$tvSuperAddict = $modx->getOption(\'tvSuperAddict\', $sp);\\n$autoFileBrowser = $modx->getOption(\'autoFileBrowser\', $sp);\\n$browserTopNAVsubtext = $modx->getOption(\'browserTopNAVsubtext\', $sp);\\n$fileImageTVs = $modx->getOption(\'fileImageTVs\', $sp);\\n$browserTVs = \'\';\\n$disable = $modx->getOption(\'disableEnableCheckbox\', $sp);\\n\\/\\/if a suffix is entered, all the chunks in use must have the same suffix. (e.g. TinymceWrapperIntrotext-suff, TinymceWrapperDescription-suff,TinymceWrapperContent-suff,TinymceWrapperTvs-suff)\\n$suffix = $modx->getOption(\'chunkSuffix\', $sp);\\n$fileManagerTopNavLink = $modx->getOption(\'fileManagerTopNavLink\', $sp);\\n\\n\\/\\/grab file browser options\\n$modxNativeBrowserRTEurl = $modx->getOption(\'modxNativeBrowserRTEurl\', $sp);\\n$modxNativeBrowserRTEtitle = $modx->getOption(\'modxNativeBrowserRTEtitle\', $sp);\\n$modxNativeBrowserTopNAVtitle = $modx->getOption(\'modxNativeBrowserTopNAVtitle\', $sp);\\n\\n$elFinderBrowserRTEurl = $modx->getOption(\'elFinderBrowserRTEurl\', $sp);\\n$elFinderBrowserRTEtitle = $modx->getOption(\'elFinderBrowserRTEtitle\', $sp);\\n$elFinderBrowserTopNAVurl = $modx->getOption(\'elFinderBrowserTopNAVurl\', $sp);\\n$elFinderBrowserTopNAVtitle = $modx->getOption(\'elFinderBrowserTopNAVtitle\', $sp);\\n$elFinderBrowserSHORTtitle = $modx->getOption(\'elFinderBrowserSHORTtitle\', $sp);\\n\\n$responsivefilemanagerBrowserRTEurl = $modx->getOption(\'responsivefilemanagerBrowserRTEurl\', $sp);\\n$responsivefilemanagerBrowserRTEtitle = $modx->getOption(\'responsivefilemanagerBrowserRTEtitle\', $sp);\\n$responsivefilemanagerBrowserTopNAVurl = $modx->getOption(\'responsivefilemanagerBrowserTopNAVurl\', $sp);\\n$responsivefilemanagerBrowserTopNAVtitle = $modx->getOption(\'responsivefilemanagerBrowserTopNAVtitle\', $sp);\\n$responsivefilemanagerBrowserSHORTtitle = $modx->getOption(\'responsivefilemanagerBrowserSHORTtitle\', $sp);\\n\\n$roxyFilemanBrowserRTEtitle = $modx->getOption(\'roxyFilemanBrowserRTEtitle\', $sp);\\n$roxyFilemanBrowserRTEurl = $modx->getOption(\'roxyFilemanBrowserRTEurl\', $sp);\\n$roxyFilemanBrowserTopNAVurl = $modx->getOption(\'roxyFilemanBrowserTopNAVurl\', $sp);\\n$roxyFilemanBrowserTopNAVtitle = $modx->getOption(\'roxyFilemanBrowserTopNAVtitle\', $sp);\\n$roxyFilemanBrowserSHORTtitle = $modx->getOption(\'roxyFilemanBrowserSHORTtitle\', $sp);\\n\\n\\/\\/this eliminates clutter and confusion: reusuable config is the way of the past and the future - code here will be put in placeholder [[+commonTinyMCECode]]\\n\\/\\/apply comma here, not in the chunk calling it\\nif ($modxEventName == \'OnManagerPageInit\' || $modxEventName == \'OnDocFormPrerender\') {\\n  $commonCode = $modx->getChunk(\'TinymceWrapperCommonCode\' . $suffix);\\n  \\/\\/ $commonCode = $commonCode ? $commonCode.\',\' : \'\';\\n  $commonCode = $commonCode ? $commonCode : \'\';\\n}\\n\\n\\/\\/when TinyMCE is temporarily disabled, any new edit is updated before saving\\n$autoSaveTextAreas = \'\\n  function autoSaveTextAreas(selectorId){\\n    setTimeout(function(){\\n      $(\\"#\\"+selectorId).on(\\"change\\", function() {\\n        tinyMCE.get(selectorId).setContent($(\\"#\\"+selectorId).val())\\n        \\/\\/ console.log(selectorId+\\" has been updated\\");\\/\\/debug stuff\\n      })\\n    },500)\\n   }\\n\';\\n\\n\\/\\/let\'s setup some functions and file select callbacks for our supported file browsers\\nswitch ($autoFileBrowser) {\\n  case \'modxNativeBrowser\':\\n    $browserRTEurl = $modxNativeBrowserRTEurl;\\n    $browserRTEtitle = $modxNativeBrowserRTEtitle;\\n    $browserTopNAVtitle = $modxNativeBrowserTopNAVtitle;\\n    break;\\n  case \'elFinderBrowser\':\\n    $browserRTEurl = \'\\"\'.$elFinderBrowserRTEurl.\'\\"\';\\n    $browserRTEtitle = $elFinderBrowserRTEtitle;\\n    $browserTopNAVurl = \'\\\\\'\'.$elFinderBrowserTopNAVurl.\'\\\\\'\';\\n    $browserTopNAVtitle = $elFinderBrowserTopNAVtitle;\\n    $browserShortTitle = $elFinderBrowserSHORTtitle;\\n    break;\\n  case \'responsivefilemanagerBrowser\':\\n    $browserRTEtitle = $responsivefilemanagerBrowserRTEtitle;\\n    $browserRTEurl = $responsivefilemanagerBrowserRTEurl;\\n    $browserTopNAVurl = $responsivefilemanagerBrowserTopNAVurl;\\n    $browserTopNAVtitle = $responsivefilemanagerBrowserTopNAVtitle;\\n    $browserShortTitle = $responsivefilemanagerBrowserSHORTtitle;\\n    break;\\n  case \'roxyFilemanBrowser\':\\n    $browserRTEtitle = $roxyFilemanBrowserRTEtitle;\\n    $browserRTEurl = $roxyFilemanBrowserRTEurl;\\n    $browserTopNAVurl = $roxyFilemanBrowserTopNAVurl;\\n    $browserTopNAVtitle = $roxyFilemanBrowserTopNAVtitle;\\n    $browserShortTitle = $roxyFilemanBrowserSHORTtitle;\\n    break;\\n}\\n\\n\\nif ($autoFileBrowser == \'responsivefilemanagerBrowser\') {\\n  $browserFunctions=\'\\n    autoFileBrowser = \\"\\";\\n    function responsive_filemanager_callback(field_id){\\n      thisFieldVal = $(\\"#\\"+field_id).val();\\n      thisFieldNum = field_id.split(\\"er\\");\\n      $(\\"input#tv\\"+thisFieldNum[1]).val(thisFieldVal);\\n      $(\\"#tv-image-preview-\\"+thisFieldNum[1]+\\" img\\").attr(\\"title\\",\\"preview by native MODx Image Browser\\");\\n      $(\\"#\\"+field_id).parents(\\".modx-tv\\").find(\\".twImagePreview\\").hide().attr(\\"src\\",thisFieldVal).insertBefore(\\"#tv-image-preview-\\"+thisFieldNum[1]).fadeIn(\\"slow\\");\\n      tinyMCE.activeEditor.windowManager.close();\\n    }\\n  \';\\n}\\nelseif ($autoFileBrowser == \'roxyFilemanBrowser\') {\\n  $browserFunctions=\'\\n    autoFileBrowser = \'.$autoFileBrowser.\';\\n      function \'.$autoFileBrowser.\'(field_name, url, type, win) {\\n        roxyFileman = \'.$browserRTEurl.\';\\n        if (roxyFileman.indexOf(\\"?\\") < 0) {\\n          roxyFileman += \\"?type=\\" + type;\\n        }\\n        else {\\n          roxyFileman += \\"&type=\\" + type;\\n        }\\n        roxyFileman += \\"&input=\\" + field_name + \\"&value=\\" + win.document.getElementById(field_name).value;\\n        if(tinyMCE.activeEditor.settings.language){\\n          roxyFileman += \\"&langCode=\\" + tinyMCE.activeEditor.settings.language;\\n        }\\n        tinyMCE.activeEditor.windowManager.open({\\n          title: \\"\'.$browserRTEtitle.\'\\",\\n          url: roxyFileman,\\n          plugins: \\"media\\",\\n          width : $(window).width()\\/1.2,\\n          height : $(window).height()\\/1.2\\n        }, {\\n          oninsert: function(url) {\\n            win.document.getElementById(field_name).value = url;\\n          }\\n        });\\n      return false;\\n      }\\n  \';\\n}\\nelse{\\n  $browserFunctions =\'\\n    autoFileBrowser = \'.$autoFileBrowser.\';\\n    function \'.$autoFileBrowser.\'(field_name, url, type, win) {\\n      tinyMCE.activeEditor.windowManager.open({\\n        title: \\"\'.$browserRTEtitle.\'\\",\\n        url: \'.$browserRTEurl.\',\\n        width : $(window).width()\\/1.2,\\n        height : $(window).height()\\/1.2\\n      }, {\\n        oninsert: function(url) {\\n          win.document.getElementById(field_name).value = url;\\n        }\\n      });\\n    return false;\\n    }\\n  \';\\n}\\n\\n\\n\\n\\/\\/lock the below to this event, to prevent spill over\\nif ($modxEventName == \'OnDocFormPrerender\') {\\n  \\/\\/let\'s expose the RFM rootfolder url for TinyMCE\'s external filemanager plugins for the chunks to access\\n\\n  $enableDisableTiny = \'\';\\n  \\/\\/is the enable\\/disable TinyMCE option selected? If so, let\'s create all the buttons at once; this will be split later on. This is good for TVs that have default content, and user wishes to revert. Disable TinyMCE, then revert.\\n  \\/\\/there are two $(\\"#ta\\") below; don\'t ask me why the Articles\' Container\\/Child are has own thing going own here\\n  if ($disable == 1) {\\n  \\/\\/prepend is better than append - you\'ll see!!!\\n    $disableTitle = \'Disable TinyMCE\';\\n    $enableDisableTiny = \'\\n    $(\\"#modx-resource-introtext\\").parent().parent().prepend(\\"<input data-tiny=\\\\\'modx-resource-introtext\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");@\\n    $(\\"#modx-resource-description\\").parent().parent().prepend(\\"<input data-tiny=\\\\\'modx-resource-description\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");@\\n    $(\\"#ta\\").parents(\\"#modx-resource-content\\").find(\\".x-panel-header-text\\").prepend(\\"<input data-tiny=\\\\\'ta\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");\\n    if($(\\"#articles-box-publishing-information\\").length){\\n      $(\\"#ta\\").parents(\\".contentblocks_replacement\\").find(\\"label[for=ta]\\").prepend(\\"<input data-tiny=\\\\\'ta\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'\'.$disableTitle.\'\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");\\n    }\\n    if($(\\"#modx-resource-tabs__articles-tab-template\\").length){\\n      $(\\"#modx-resource-header\\").append(\\"<p id=\\\\\'tinyArtAlert\\\\\' style=\\\\\'width:70%;margin:0 auto;background-color:#32AB9A;padding:10px;border-radius:10px;color:white;text-align:center;\\\\\'><b>TinyMCE Wrapper Raw Code Protection:<\\/b><br>Check this Articles Container > Template [Tab] > Content, before saving.<br>Unchecking the box will not only disable but remove TinyMCE, thus protecting your code<\\/p>\\");\\n      $(\\"#ta\\").parent().parent().find(\\"label[for=ta]\\").prepend(\\"<input data-tiny=\\\\\'ta\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'Remove TinyMCE \\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVchecky\\\\\' onclick=\\\\\'javascript:tinymce.get(\\\\\\"ta\\\\\\").remove();$(this).remove();$(\\\\\\"#tinyArtAlert\\\\\\").fadeOut().remove();\\\\\' \\/>&nbsp;&nbsp;&nbsp;\\");\\n    }\\n  \';\\n  \\/\\/let\'s split the enable\\/disable checkboxes so that they don\'t appear randomly or unexpectedly\\n  $enableDisableTiny = explode(\\"@\\", $enableDisableTiny);\\n  \\/\\/what happens when you click the enable\\/disable checkbox\\n  $enableDisableTinyClick = \'\\n    $(\\".tinyTVcheck\\").mousedown(function() {\\n      autoSaveTextAreas($(this).attr(\\"data-tiny\\"));\\n      if (this.checked) {\\n        tinymce.get($(this).attr(\\"data-tiny\\")).hide();\\n        $(this).trigger(\\"change\\").attr(\\"title\\",\\"Enable TinyMCE\\");\\n      }\\n      else{\\n        tinymce.get($(this).attr(\\"data-tiny\\")).show();\\n        $(this).trigger(\\"change\\").attr(\\"title\\",\\"\'.$disableTitle.\'\\");\\n      }\\n      });\';\\n  }\\n\\n  \\/\\/All TVs are here nicely placed independent of strict conditions, just in case we want to activate TVS even when RTE is disabled for a particular resource\\n  if ($tvs == 1) {\\n    $tvsChunk = $modx->getChunk(\'TinymceWrapperTVs\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n    if ($tvsChunk) {\\n      \\/\\/let\'s remove the checkboxes that enables\\/disables TinyMCE for the TVs\\n      \\/\\/let\'s allow the TV reset button to work through TinyMCE, either enabled or disabled - textareas are updated .on change + the delay is neccesary since we are pseudo binding to existing click event\\n      if ($disable == 1) {\\n        $richTv = \'\\n        if($(\\".modx-richtext\\").length){\\n          function updateReset(updateR){\\n            setTimeout(function(){\\n              tinyMCE.get(updateR).setContent($(\\"#\\"+updateR).val());\\n              \\/\\/ console.log(updateR+\\" has been updated\\");\\/\\/debug stuff\\n            },200)\\n          }\\n          $.each($(\\".modx-richtext\\"), function() {\\n            updateR = $(this).attr(\\"id\\");\\n          $(this).parent().parent().find(\\".modx-tv-reset\\").on(\\"click\\", function(){\\n            updateReset($(this).attr(\\"data-tiny\\"));\\n          });\\n          $(this).parent().parent().prepend(\\"<input data-tiny=\\\\\'\\"+this.id+\\"\\\\\' checked=\\\\\'checked\\\\\' title=\\\\\'Disable TinyMCE\\\\\' type=\\\\\'checkbox\\\\\' class=\\\\\'tinyTVcheck\\\\\' \\/>\\");\\n          $(this).parent().parent().find(\\".modx-tv-reset\\").attr(\\"data-tiny\\",this.id)\\n          });\\n        setTimeout(function(){\\n          \' . $tvsChunk . \'\\n        },1000);\\n        }\\n        \';\\n      } \\n      else {\\n        $richTv = \'\\n        if($(\\".modx-richtext\\").length){\\n          $.each($(\\".modx-richtext\\"), function() {\\n          $(this).parent().parent().find(\\".modx-tv-reset\\").on(\\"click\\", function(){$(this).change()});\\n            });\\n        setTimeout(function(){\\n          \' . $tvsChunk . \'\\n        },1000);\\n        }\';\\n      }\\n    }\\n  }\\n  if ($fileImageTVs == 1) {\\n    \\/*\\n    - RFM callback when an item is clicked\\n    - provide two ways to pop up RFM; the TInyMCE way is neater and more uniform\\n    - append hidden input#tinyFileImageBrowser to the body so that we have at least one active editor, in case the user has disabled TinyMCE for all other textareas and TVs\\n    - do some magic: create the respective image and file RFM buttons with appropriate properties when the page is really ready\\n    - create rudimentary image prev something similar to the native MODx\' file browser\\n    - init hidden #tinyFileImageBrowser\\n    - Create tinymce #tinyFileImageBrowser on condition; give a definite CSS theme (only when one is not already loaded) to avoid overriding issues. Allow cross-browser amiability by setting to inline:true\\n    - make rfmTinyPopup popup somewhat responsive\\n    - add RFM menu button to MODx Media drop down - depends on the option fileImageTvs\\n    *\\/\\n    $browserTVs = \'\\n      function imageFileTVpop(field_name, url, type, win) {\\n        thisUrl = \'.$browserRTEurl.\';\\n        if (thisUrl.indexOf(\\"dialog\\") > 0) {\\n            thisUrl = thisUrl.replace(\\"popup=1\\", \\"popup=0\\");\\n          if (thisUrl.indexOf(\\"?\\") < 0) {\\n            thisUrl += \\"?field_id=\\"+field_name;\\n          }\\n          else {\\n            thisUrl += \\"&field_id=\\"+field_name;\\n          }\\n        }\\n        tinyMCE.activeEditor.windowManager.open({\\n          title: \\"\'.$browserRTEtitle.\'\\",\\n          url: thisUrl,\\n          width : $(window).width()\\/1.2,\\n          height : $(window).height()\\/1.2\\n        }, {\\n          oninsert: function(url) {\\n            $(\\"#\\"+field_name).val(url);\\n            thisFieldNum = field_name.split(\\"er\\");\\n            $(\\"input#tv\\"+thisFieldNum[1]).val(url);\\n            $(\\"#tv-image-preview-\\"+thisFieldNum[1]+\\" img\\").attr(\\"title\\",\\"preview by \'.$browserShortTitle.\'\\");\\n            $(\\"#\\"+field_name).parents(\\".modx-tv\\").find(\\".twImagePreview\\").hide().attr(\\"src\\",url).insertBefore(\\"#tv-image-preview-\\"+thisFieldNum[1]).fadeIn(\\"slow\\");\\n            tinyMCE.activeEditor.windowManager.close();\\n          }\\n        });\\n      return false;\\n      }\\n      Ext.onReady(function(){\\n       setTimeout(function(){\\n         $(\\"body\\").append(\\"<input id=\\\\\'tinyFileImageBrowser\\\\\' type=\\\\\'hidden\\\\\' value=\\\\\'\\\\\' \\/>\\");\\n         $(\\"input[id^=tvbrowser]\\").each(function(){\\n        fileOrImage = $(this).parents(\\".modx-tv\\").find(\\".x-form-file-trigger\\").attr(\\"id\\");\\n        if($(\\"#\\"+fileOrImage).length){\\n        twImageFileOnClick = \\"imageFileTVpop($(this).attr(\\\\\'data-tiny\\\\\'))\\";\\n        twImageFileBtn = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;(all&nbsp;files)&nbsp;\\\\\';\\n        twImageFileBtnTitle = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;All-File&nbsp;Browser&nbsp;\\\\\';\\n        twImagePreview = \\"\\";\\n          }\\n          else{\\n        twImageFileOnClick = \\"imageFileTVpop($(this).attr(\\\\\'data-tiny\\\\\'))\\";\\n        twImageFileBtn = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;(images)&nbsp;\\\\\';\\n        twImageFileBtnTitle = \\\\\'&nbsp;\'.$browserShortTitle.\'&nbsp;Image-Only&nbsp;Browser&nbsp;\\\\\';\\n        twImagePreview = \\"<img class=\\\\\'twImagePreview\\\\\' title=\\\\\'preview by \'.$browserShortTitle.\' Image Browser\\\\\' src=\\\\\'\\\\\' style=\\\\\'width:100px;display:none;\\\\\' \\/>\\";\\n          }\\n          $(this).parents(\\".x-form-item\\")\\n          .find(\\".modx-tv-caption\\")\\n          .parent()\\n          .prepend(\\"<input class=\\\\\'twImageFileBtnClass x-form-field-wrap x-form-trigger\\\\\' data-tiny=\\"+this.id+\\" type=\\\\\'button\\\\\' value=\\"+twImageFileBtn+\\" title=\\"+twImageFileBtnTitle+\\" onclick=\\"+twImageFileOnClick+\\">\\"+twImagePreview);\\n          if(tinymce.editors.length < 1){\\n            tinymce.init({\\n              selector: \\"#tinyFileImageBrowser\\",\\n              skin_url: MODx.config.assets_url+\\"components\\/tinymcewrapper\\/tinymceskins\\/fairOphelia\\",\\n              inline:true,\\n              forced_root_block : \\"\\",\\n              force_br_newlines : false,\\n              force_p_newlines : false\\n            })\\n          }\\n        })\\n        },1000);\\n      })\\n    \';\\n    if($autoFileBrowser ==\'modxNativeBrowser\'){\\n      $browserTVs = \'\';\\n    }\\n  }\\n}\\n\\n\\/\\/if user selects the option to activate this wrapper, we save him\\/her the trip of heading to System Settings - is this being too officious or intrusive?\\nif ($activateTinyMCE == 1) {\\n  if ($useEditor !== 1 || $whichEditor !== \'TinymceWrapper\') {\\n    $use = $modx->getObject(\'modSystemSetting\', \'use_editor\');\\n    $use->set(\'value\', 1);\\n    $use->save();\\n    $which = $modx->getObject(\'modSystemSetting\', \'which_editor\');\\n    $which->set(\'value\', \'TinymceWrapper\');\\n    $which->save();\\n  }\\n  \\/\\/leave all elements alone - attack only resources\\nif ($modxEventName == \'OnDocFormPrerender\') {\\n    \\n    \\/\\/check if user wants to load TinyMCE for New Resources\\n      $loadTiny = 0; \\/\\/default\\n    if(isset($scriptProperties[\'resource\']) && $resource->get(\'richtext\')) { \\/\\/existing resource with RTE clicked\\n      $loadTiny = 1;\\n      }\\n    if($loadTiny == 0 && $newResources == 1 && $richtext_default == 1 && !isset($scriptProperties[\'resource\'])) {\\n      $loadTiny = 1;\\n    }\\n\\n    if ($loadTiny == 1) {\\n      \\/\\/should we load jQuery?\\n      if ($jQuerySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n      }\\n      \\/\\/should we load TinyMCE (from CDN or assets folder)?\\n      if ($tinySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n      }\\n      \\/\\/let\'s init introtext, description and content textareas only if user has specified so in this plugin\'s properties\\n      if ($introtext == 1) {\\n        $introChunk = $modx->getChunk(\'TinymceWrapperIntrotext\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n        if ($introChunk) {\\n          $intro = $enableDisableTiny[0] . $introChunk;\\n        }\\n      }\\n      if ($description == 1) {\\n        $descChunk = $modx->getChunk(\'TinymceWrapperDescription\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n        if ($descChunk) {\\n          $desc = $enableDisableTiny[1] . $descChunk;\\n        }\\n      }\\n      if ($content == 1) {\\n        $conChunk = $modx->getChunk(\'TinymceWrapperContent\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n        if ($conChunk) {\\n          $con = $enableDisableTiny[2] . $conChunk;\\n        }\\n      }\\n      \\/\\/all textareas depend on whether the Resource is Rich Text-enabled. We use so many IFs to protect against error\\n      \\/\\/any and all Rich TVs + File and Image TVs will now be initiated\\n      \\/\\/Now let\'s do the real init of all textareas\\n      \\/\\/seems Ext.onReady is better than setTimeout, delay of 400\\n      $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $autoSaveTextAreas . $browserTVs . \\"Ext.onReady(function () {\\" . $intro . $desc . $con . $richTv . $enableDisableTinyClick . \\"});<\\/script>\\");\\n    }\\n    \\/\\/let\'s see if the person wants TVs activated even when RTE is disabled for the Resource.\\n    elseif (isset($scriptProperties[\'resource\']) && !$resource->get(\'richtext\')) {\\n        if ($tvAddict == 1) {\\n          if ($jQuerySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n          }\\n          if ($tinySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n          }\\n          $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $autoSaveTextAreas . $browserTVs . \\"Ext.onReady(function () {\\" . $richTv . $enableDisableTinyClick . \\"});<\\/script>\\");\\n        }\\n    }\\n  }\\n}\\nelse{\\n  if ($modxEventName == \'OnDocFormPrerender\') {\\n        if ($tvSuperAddict == 1) {\\n          if ($jQuerySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n          }\\n          if ($tinySrc) {\\n            $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n          }\\n          $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $autoSaveTextAreas . $browserTVs . \\"Ext.onReady(function () {\\" . $richTv . $enableDisableTinyClick . \\"});<\\/script>\\");\\n        }\\n  }\\n}\\n\\nif ($modxEventName == \'OnManagerPageInit\' || $modxEventName == \'OnDocFormPrerender\') {\\n  $mediaPopUp =\'\';\\n  if ($fileManagerTopNavLink == 1 && $autoFileBrowser !== \'modxNativeBrowser\') {\\n    \\/\\/ inject file browser link to Manager Top Nav Media dropdown\\n    $mediaPopUp = \'\\n      function mediaPopup(url)\\n        {\\n          var w = 880;\\n          var h = 570;\\n          var l = Math.floor((screen.width-w)\\/2);\\n          var t = Math.floor((screen.height-h)\\/2);\\n          var win = window.open(url, \\"\\", \\"scrollbars=1,width=\\" + w + \\",height=\\" + h + \\",top=\\" + t + \\",left=\\" + l);\\n        }\\n\\n      taskCounter = 0;\\n      var linkCheck = setInterval(function(){\\n        \\/\\/requires no jQuery or TinyMCE - will work even if activateTinyMCE is false\\n        var fileBrowserBro = document.getElementById(\\"file_browser\\");\\n        if(fileBrowserBro){\\n          taskCounter++;\\n          fileBrowserBro.insertAdjacentHTML( \\"afterbegin\\", \\"<li><a href=\\\\\\"javascript:;\\\\\\" onclick=\\\\\\"mediaPopup(\'.$browserTopNAVurl.\')\\\\\\">\'.$browserTopNAVtitle.\'<span class=\\\\\\"description\\\\\\">\'.$browserTopNAVsubtext.\'<\\/span><\\/a><\\/li>\\");\\n        }\\n        if(taskCounter = 1)\\n          {clearInterval(linkCheck);\\n          }\\n      },1000);\\n    \';\\n     $modx->regClientStartupHTMLBlock(\\"<script>\\" . $mediaPopUp . \\"<\\/script>\\");\\n  }\\n\\n  \\/\\/let\'s catch only the textarea[content] when it is created. You can use livejquery or arrive.js if you like\\n  \\/\\/make it non-obstrusive - mouseenter seems better tan mouseout - works when modal pops and cursor is already on the textarea\\n\\n  $quickUpdateCreate = $modx->getOption(\'quickUpdateCreate\', $sp);\\n  $quick = \'\';\\n  $quickChunk = $modx->getChunk(\'TinymceWrapperQuickUpdate\' . $suffix, array(\'commonTinyMCECode\'=>$commonCode));\\n\\n  if ($quickChunk) {\\n    $quick = $quickChunk;\\n  }\\n  if ($quickUpdateCreate == 1){\\n    \\/\\/do not load these twice when resources are being edited\\n    if ($modxEventName == \'OnManagerPageInit\') {\\n      if ($jQuerySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $jQuerySrc . \\"\'><\\/script>\\");\\n      }\\n      if ($tinySrc) {\\n        $modx->regClientStartupHTMLBlock(\\"<script src=\'\\" . $tinySrc . \\"\'><\\/script>\\");\\n      }\\n    }\\n\\n    $quickUpdateTinyMCE = \'\\n      $(document).on(\\"mouseenter\\", \\".modx-window\\", function () {\\n        tinyContent = $(this).find(\\"textarea[name=content]\\");\\n        quickyId = \\"#\\"+tinyContent.attr(\\"id\\");\\n        dataTiny = tinyContent.attr(\\"id\\");\\n        \\/\\/ if ($(this).has(\\"textarea[name=content]\\").length){\\/\\/will catch Quick edit files from server\\n        if ($(this).has(\\"input[name=published]\\").length && $(this).has(\\"textarea[name=content]\\").length){\\n          if ($(this).has(\\".tinyEn\\").length){\\n          }\\n          else{\\n          \\/\\/ tinyContent.parent().parent().find(\\"label\\").prepend(\\"<button class=\\\\\'tinyEn x-form-field-wrap x-form-trigger\\\\\' onclick=enableTiny(quickyId,dataTiny)>Edit with TinyMCE?<\\/button>&nbsp;&nbsp;&nbsp;\\");\\n          $(this).find(\\".x-toolbar-left-row\\").prepend(\\"<p onclick=enableTiny(quickyId,dataTiny) class=\\\\\'x-btn x-btn-small x-btn-icon-small-left x-btn-noicon\\\\\' unselectable=\\\\\'on\\\\\'><em><button class=\\\\\'tinyEn x-btn-text\\\\\'>Edit with TinyMCE<\\/button><\\/em><\\/p>\\");\\n          $(this).find(\\".tinyEn\\").attr(\\"data-tiny\\",dataTiny);\\n          \\/\\/ $(this).find(\\"button:contains(\\\\\'Close\\\\\')\\").first().attr(\\"data-tiny\\",\\"close-\\"+dataTiny);\\n          \\/\\/ $(this).find(\\"button:contains(\\\\\'Save\\\\\')\\").first().attr(\\"data-tiny\\",\\"save-\\"+dataTiny);\\n          }\\n        }\\n      \\/\\/ })\\n      \\/\\/ .on(\\"mouseout\\", tinymce.activeEditor, function () {\\n        \\/\\/ if(tinymce.editors.length > 1){}\\n        \\/\\/ if (tinyMCE.activeEditor !== null){\\n        \\/\\/   if(tinyMCE.activeEditor.isHidden() != true){\\n        \\/\\/     tinyMCE.activeEditor.save();\\n        \\/\\/     javascript:console.log(\\"saved\\");\\n        \\/\\/   }\\n        \\/\\/ }\\n      });\\n      function enableTiny(quickyId,id){\\n        enableTinyInit(quickyId);\\n        id = dataTiny;\\n        $(\\"button[data-tiny=\\\\\'\\"+id+\\"\\\\\']\\").html(\\"Disable TinyMCE\\").parent().parent().attr(\\"onclick\\",\\"disTiny(dataTiny)\\");\\n      }\\n      function disTiny(dataTiny){\\n        dataTiny = dataTiny;\\n        tinymce.get(dataTiny).hide();\\n        $(\\"button[data-tiny=\\\\\'\\"+dataTiny+\\"\\\\\']\\").html(\\"Enable TinyMCE\\").parent().parent().attr(\\"onclick\\",\\"enTiny(dataTiny)\\");\\n      }\\n      function enTiny(dataTiny){\\n        dataTiny = dataTiny;\\n        tinymce.get(dataTiny).show();\\n        $(\\"button[data-tiny=\\\\\'\\"+dataTiny+\\"\\\\\']\\").html(\\"Disable TinyMCE\\").parent().parent().attr(\\"onclick\\",\\"disTiny(dataTiny)\\");\\n      }\\n      function enableTinyInit(quickyId){\\n        $(quickyId).parents(\\".modx-window\\").find(\\".x-tab-panel-body.x-tab-panel-body-top\\").css({\\"overflow\\":\\"hidden\\",\\"overflow-y\\":\\"auto\\"});\\n        \' .$quick. \'\\n      }\\n      \';\\n      $modx->regClientStartupHTMLBlock(\\"<script>\\" . $browserFunctions . $quickUpdateTinyMCE . \\"<\\/script>\\");\\n  }\\n}"}',
        'guid' => '869b9cc76e0250432478bc2dc650d4b7',
        'native_key' => 1,
        'signature' => '93e9ec13ac4badb68024b77d9661e58e',
      ),
    ),
    'Templates' => 
    array (
      'cfd96ce67969ea5584cc369b0b1703c9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'templatename',
        'class' => 'modTemplate',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"templatename":"TinymceWrapper","description":"","editor_type":0,"category":0,"icon":"","template_type":0,"content":"<html>\\n<head>\\n<title>[[++site_name]] - [[*pagetitle]]<\\/title>\\n<base href=\\"[[++site_url]]\\" \\/>\\n<\\/head>\\n<body>\\n[[*content]]\\n<br><br>\\n[[*TinymceWrapperTV1]]<br><br>\\n[[*TinymceWrapperTV2]]<br><br>\\n[[*TinymceWrapperTV3]]\\n<\\/body>\\n<\\/html>","locked":0,"properties":"a:0:{}","static":0,"static_file":""}',
        'guid' => '4270a706693147d4f44ca58c7555559c',
        'native_key' => 1,
        'signature' => '3618edfc92b822f31562e655ab870a66',
      ),
    ),
    'TemplateVars' => 
    array (
      '17f8feef36581f99f838151c52af6150' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"type":"richtext","name":"TinymceWrapperTV1","caption":"TinymceWrapper Rich Tv #1","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":0,"display":"default","default_text":"<p>I am a wealthy textarea: You can reset me to default with TinyMCE on or off<\\/p>","properties":"a:0:{}","input_properties":"a:3:{s:10:\\"allowBlank\\";s:4:\\"true\\";s:9:\\"maxLength\\";s:0:\\"\\";s:9:\\"minLength\\";s:0:\\"\\";}","output_properties":"a:0:{}","static":0,"static_file":"","content":"<p>I am a wealthy textarea: You can reset me to default with TinyMCE on or off<\\/p>"}',
        'guid' => '9e0d49cd1cca93192b90df88628ef175',
        'native_key' => 1,
        'signature' => 'd4ae1df6bf53e47cfe0e068477e01578',
      ),
      'c8d19842ad2ac7e0db10bab13ea92173' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"type":"file","name":"fileRichTv","caption":"fileRichTv","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":1,"display":"default","default_text":"","properties":"a:0:{}","input_properties":"a:0:{}","output_properties":"a:0:{}","static":0,"static_file":"","content":""}',
        'guid' => '97aa966daa5303d29447cf70df9e7790',
        'native_key' => 2,
        'signature' => 'fc7cfb435cca9684936486c04f3fee53',
      ),
      'b563d93114442d29074fdfa02c93b907' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"type":"image","name":"imageRichTv","caption":"imageRichTv","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":3,"display":"default","default_text":"","properties":"a:0:{}","input_properties":"a:0:{}","output_properties":"a:0:{}","static":0,"static_file":"","content":""}',
        'guid' => 'f939a137bd30e8259803ab20a95ea673',
        'native_key' => 3,
        'signature' => 'd447a89947fefa089fcfd52bf3d2d80b',
      ),
      '78fe545eca14bca915a4dbc1fe48dd52' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"type":"image","name":"imageRichTv2","caption":"imageRichTv2","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":4,"display":"default","default_text":"","properties":"a:0:{}","input_properties":"a:0:{}","output_properties":"a:0:{}","static":0,"static_file":"","content":""}',
        'guid' => 'e96c29670b7469259906379e28a804cc',
        'native_key' => 4,
        'signature' => '29792ee6dcc9d20789db3a5aed1ea482',
      ),
      '4648044b5583fd4ab2cebb802b051e72' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":5,"source":0,"property_preprocess":0,"type":"file","name":"fileRichTv2","caption":"fileRichTv2","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":2,"display":"default","default_text":"","properties":"a:0:{}","input_properties":"a:0:{}","output_properties":"a:0:{}","static":0,"static_file":"","content":""}',
        'guid' => '31c5a644b96e3666e1fa53351db60635',
        'native_key' => 5,
        'signature' => '999fc675e956fd03c7e7a2e991ad0399',
      ),
      '3bf3b7110dd28b0aa753fe92468c4c6c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":6,"source":0,"property_preprocess":0,"type":"textarea","name":"TinymceWrapperTV3","caption":"TinymceWrapper non-Rich Tv #3","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":6,"display":"default","default_text":"<p>I am a poor textarea<\\/p>","properties":"a:0:{}","input_properties":"a:1:{s:10:\\"allowBlank\\";s:4:\\"true\\";}","output_properties":"a:0:{}","static":0,"static_file":"","content":"<p>I am a poor textarea<\\/p>"}',
        'guid' => '4cc2983bc32ef484b553330128acec33',
        'native_key' => 6,
        'signature' => 'd1d086fb0b3ce491ba169d5db2b5a1f5',
      ),
      '0347476913003f9422ef48aeb2f5530c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modTemplateVar',
        'object' => '{"id":7,"source":0,"property_preprocess":0,"type":"richtext","name":"TinymceWrapperTV2","caption":"TinymceWrapper Rich Tv #2","description":"","editor_type":0,"category":0,"locked":0,"elements":"","rank":5,"display":"default","default_text":"<p>I am a wealthy textarea<\\/p>","properties":"a:0:{}","input_properties":"a:3:{s:10:\\"allowBlank\\";s:4:\\"true\\";s:9:\\"maxLength\\";s:0:\\"\\";s:9:\\"minLength\\";s:0:\\"\\";}","output_properties":"a:0:{}","static":0,"static_file":"","content":"<p>I am a wealthy textarea<\\/p>"}',
        'guid' => '01f0416389e06bdab59cb3330cf42020',
        'native_key' => 7,
        'signature' => '528b3bd437a657e65960e083bb19846d',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'tinymcewrapper',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"tinymcewrapper-2.1.1-beta1\\/modCategory\\/279ca963ca6b141c210d4f9e29c36e49\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"tinymcewrapper"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"tinymcewrapper-2.1.1-beta1\\/modCategory\\/279ca963ca6b141c210d4f9e29c36e49\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"tinymcewrapper"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '893df6de80434df3b01512c90441464e',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '279ca963ca6b141c210d4f9e29c36e49',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"TinymceWrapper"}',
);